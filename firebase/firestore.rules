rules_version = '2';
service cloud.firestore { match /databases/{database}/documents {
  //------------------------------------------------------------------------------------------------------------------
  // FORBID ANY UNMATCHED REQUEST
  //------------------------------------------------------------------------------------------------------------------
  match /{document=**} {
    allow read, write: if true;
  }

  //------------------------------------------------------------------------------------------------------------------
  // HELPER FUNCTIONS
  //------------------------------------------------------------------------------------------------------------------
  function loggedInUserId() {
    return request.auth.uid;
  }
  function onlyPermittedFieldsChanged(request, resource, keys) {
    let affectedKeys = resource == null ?
      request.resource.data.keys() :
      request.resource.data.diff(resource.data).affectedKeys();
    return affectedKeys.hasOnly(keys);
  }

  function propertyUndefinedOrNull(object, key) {
    return !(key in object) || object[key] == null;
  }

  function valueIsType(value, type) {
    return type == 'string' ? value is string :
      type == 'number' ? value is number :
      type == 'bool' ? value is bool :
      type == 'map' ? value is map :
      type == 'list' ? value is list :
      type == 'timestamp' ? value is timestamp :
      false;
  }
  function requiredProperty(object, key, type) {
    return key in object && valueIsType(object[key], type);
  }
  function optionalProperty(object, key, type) {
    return key in object && (object[key] == null || valueIsType(object[key], type));
  }
  function optionalOrUndefinedProperty(object, key, type) {
    return !(key in object) || object[key] == null || valueIsType(object[key], type);
  }

  //------------------------------------------------------------------------------------------------------------------
  // MODEL ACCESS
  //------------------------------------------------------------------------------------------------------------------
  match /Games/{gameId} {
    allow read;
    allow create; // TODO: validate structure

    match /GameEvents/{gameEventId} {
      allow read;
      allow create; // TODO: validate structure
    }
  }

  match /UserProfiles/{userId} {
    allow read;
    allow write: if request.auth != null && userId == request.auth.uid; // TODO: validate structure
  }
}}
